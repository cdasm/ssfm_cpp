#include "bundleFunctionAndJacobian.h"




MatrixXd functionForRotationAndTransition(const MatrixXd& var0,const MatrixXd& var1,const MatrixXd& var2)
{
	double b0,b1,b2;
	b0=var0(0,0);
	b1=var0(0,1);
	b2=var0(0,2);
	double c0,c1,c2;
	c0=var1(0,0);
	c1=var1(0,1);
	c2=var1(0,2);
	double d0,d1,d2,d3,d4,d5;
	d0=var2(0,0);
	d1=var2(0,1);
	d2=var2(0,2);
	d3=var2(0,3);
	d4=var2(0,4);
	d5=var2(0,5);
	MatrixXd A0(1,3);
	double t2 ,t3 ,t4 ,t5 ,t6 ,t7 ,t8 ,t9 ,t10 ,t11 ,t12 ,t13 ,t14 ,t15 ,t16 ,t17 ;
	t2 = d0*d0;
	t3 = t2*(1.0/4.0);
	t4 = d1*d1;
	t5 = t4*(1.0/4.0);
	t6 = d2*d2;
	t7 = t6*(1.0/4.0);
	t8 = t3+t5+t7+1.0;
	t9 = 1.0/t8;
	t10 = c0-d3;
	t11 = d2*t9;
	t12 = c2-d5;
	t13 = c1-d4;
	t14 = t3+t5+t7-1.0;
	t15 = d1*t9;
	t16 = d0*d2*t9*(1.0/2.0);
	t17 = d0*t9;
	A0(0,0) = -b0+t12*(t15+t16)-t13*(t11-d0*d1*t9*(1.0/2.0))+t10*(t2*t9*(1.0/2.0)-t9*t14);
	A0(0,1) = -b1+t10*(t11+d0*d1*t9*(1.0/2.0))-t12*(t17-d1*d2*t9*(1.0/2.0))+t13*(t4*t9*(1.0/2.0)-t9*t14);
	A0(0,2) = -b2+t13*(t17+d1*d2*t9*(1.0/2.0))-t10*(t15-t16)+t12*(t6*t9*(1.0/2.0)-t9*t14);
	return A0;
}


MatrixXd jacobianForRotationAndTransition(const MatrixXd& var0,const MatrixXd& var1,const MatrixXd& var2)
{
	double b0,b1,b2;
	b0=var0(0,0);
	b1=var0(0,1);
	b2=var0(0,2);
	double c0,c1,c2;
	c0=var1(0,0);
	c1=var1(0,1);
	c2=var1(0,2);
	double d0,d1,d2,d3,d4,d5;
	d0=var2(0,0);
	d1=var2(0,1);
	d2=var2(0,2);
	d3=var2(0,3);
	d4=var2(0,4);
	d5=var2(0,5);
	MatrixXd A0(3,6);
	double t2 ,t3 ,t4 ,t5 ,t6 ,t7 ,t8 ,t9 ,t10 ,t11 ,t12 ,t13 ,t14 ,t15 ,t16 ,t17 ,t18 ,t19 ,t20 ,t21 ,t22 ,t23 ,t24 ,t25 ,t26 ,t27 ,t28 ,t29 ,t30 ,t31 ,t32 ,t33 ;
	t2 = d0*d0;
	t3 = t2*(1.0/4.0);
	t4 = d1*d1;
	t5 = t4*(1.0/4.0);
	t6 = d2*d2;
	t7 = t6*(1.0/4.0);
	t8 = t3+t5+t7+1.0;
	t9 = 1.0/(t8*t8);
	t10 = 1.0/t8;
	t11 = c1-d4;
	t12 = d0*t10*(1.0/2.0);
	t13 = c0-d3;
	t14 = d1*t10*(1.0/2.0);
	t15 = t3+t5+t7-1.0;
	t16 = c2-d5;
	t17 = d1*d2*t9*(1.0/2.0);
	t18 = d0*d1*d2*t9*(1.0/4.0);
	t19 = d2*t2*t9*(1.0/4.0);
	t20 = d0*d2*t9*(1.0/2.0);
	t21 = d1*t2*t9*(1.0/4.0);
	t22 = d0*t9*t15*(1.0/2.0);
	t23 = d0*t4*t9*(1.0/4.0);
	t24 = d2*t10*(1.0/2.0);
	t25 = d0*d1*t9*(1.0/2.0);
	t26 = d2*t10;
	t27 = t10*t15;
	t28 = d0*t6*t9*(1.0/4.0);
	t29 = d2*t4*t9*(1.0/4.0);
	t30 = t4*t9*(1.0/2.0);
	t31 = d1*t9*t15*(1.0/2.0);
	t32 = d1*t6*t9*(1.0/4.0);
	t33 = d0*t10;
	A0(0,0) = -t16*(t19+t25-d2*t10*(1.0/2.0))+t11*(t14+t20-d1*t2*t9*(1.0/4.0))+t13*(t12+t22-d0*t2*t9*(1.0/4.0));
	A0(0,1) = t11*(t12+t17-d0*t4*t9*(1.0/4.0))-t13*(t14+t21-d1*t9*t15*(1.0/2.0))-t16*(-t10+t18+t30);
	A0(0,2) = -t11*(t10+t18-t6*t9*(1.0/2.0))-t13*(t19+t24-d2*t9*t15*(1.0/2.0))-t16*(-t12+t17+t28);
	A0(0,3) = t27-t2*t10*(1.0/2.0);
	A0(0,4) = t26-d0*d1*t10*(1.0/2.0);
	A0(0,5) = -d1*t10-d0*d2*t10*(1.0/2.0);
	A0(1,0) = -t16*(t10+t18-t2*t9*(1.0/2.0))-t11*(t12-t22+t23)-t13*(-t14+t20+t21);
	A0(1,1) = t11*(t14+t31-d1*t4*t9*(1.0/4.0))+t16*(t24+t25-d2*t4*t9*(1.0/4.0))-t13*(-t12+t17+t23);
	A0(1,2) = -t13*(-t10+t18+t6*t9*(1.0/2.0))+t16*(t14+t20-d1*t6*t9*(1.0/4.0))-t11*(t24+t29-d2*t9*t15*(1.0/2.0));
	A0(1,3) = -t26-d0*d1*t10*(1.0/2.0);
	A0(1,4) = t27-t4*t10*(1.0/2.0);
	A0(1,5) = t33-d1*d2*t10*(1.0/2.0);
	A0(2,0) = -t11*(-t10+t18+t2*t9*(1.0/2.0))-t16*(t12-t22+t28)+t13*(-t19+t24+t25);
	A0(2,1) = -t13*(t10+t18-t30)-t11*(-t24+t25+t29)-t16*(t14-t31+t32);
	A0(2,2) = t13*(t12+t17-t28)-t11*(-t14+t20+t32)+t16*(t24-d2*t6*t9*(1.0/4.0)+d2*t9*t15*(1.0/2.0));
	A0(2,3) = d1*t10-d0*d2*t10*(1.0/2.0);
	A0(2,4) = -t33-d1*d2*t10*(1.0/2.0);
	A0(2,5) = t27-t6*t10*(1.0/2.0);
	return A0;
}


MatrixXd jacobianForPoint(const MatrixXd& var0,const MatrixXd& var1,const MatrixXd& var2)
{
	double b0,b1,b2;
	b0=var0(0,0);
	b1=var0(0,1);
	b2=var0(0,2);
	double c0,c1,c2;
	c0=var1(0,0);
	c1=var1(0,1);
	c2=var1(0,2);
	double d0,d1,d2,d3,d4,d5;
	d0=var2(0,0);
	d1=var2(0,1);
	d2=var2(0,2);
	d3=var2(0,3);
	d4=var2(0,4);
	d5=var2(0,5);
	MatrixXd A0(3,3);
	double t2 ,t3 ,t4 ,t5 ,t6 ,t7 ,t8 ,t9 ,t10 ,t11 ,t12 ,t13 ,t14 ;
	t2 = d0*d0;
	t3 = t2*(1.0/4.0);
	t4 = d1*d1;
	t5 = t4*(1.0/4.0);
	t6 = d2*d2;
	t7 = t6*(1.0/4.0);
	t8 = t3+t5+t7+1.0;
	t9 = 1.0/t8;
	t10 = d0*d1*t9*(1.0/2.0);
	t11 = t3+t5+t7-1.0;
	t12 = d1*t9;
	t13 = d0*d2*t9*(1.0/2.0);
	t14 = d1*d2*t9*(1.0/2.0);
	A0(0,0) = t2*t9*(1.0/2.0)-t9*t11;
	A0(0,1) = t10-d2*t9;
	A0(0,2) = t12+t13;
	A0(1,0) = t10+d2*t9;
	A0(1,1) = t4*t9*(1.0/2.0)-t9*t11;
	A0(1,2) = t14-d0*t9;
	A0(2,0) = -t12+t13;
	A0(2,1) = t14+d0*t9;
	A0(2,2) = t6*t9*(1.0/2.0)-t9*t11;
	return A0;
}


MatrixXd functionForRotationAndTransitionUnitLength(const MatrixXd& var0,const MatrixXd& var1,const MatrixXd& var2)
{
	double b0,b1,b2;
	b0=var0(0,0);
	b1=var0(0,1);
	b2=var0(0,2);
	double c0,c1,c2;
	c0=var1(0,0);
	c1=var1(0,1);
	c2=var1(0,2);
	double d0,d1,d2,d3,d4;
	d0=var2(0,0);
	d1=var2(0,1);
	d2=var2(0,2);
	d3=var2(0,3);
	d4=var2(0,4);
	MatrixXd A0(1,3);
	double t2 ,t3 ,t4 ,t5 ,t6 ,t7 ,t8 ,t9 ,t10 ,t11 ,t23 ,t12 ,t13 ,t14 ,t15 ,t21 ,t16 ,t17 ,t18 ,t19 ,t20 ,t22 ;
	t2 = d0*d0;
	t3 = t2*(1.0/4.0);
	t4 = d1*d1;
	t5 = t4*(1.0/4.0);
	t6 = d2*d2;
	t7 = t6*(1.0/4.0);
	t8 = t3+t5+t7+1.0;
	t9 = 1.0/t8;
	t10 = cos(d3);
	t11 = sin(d4);
	t23 = t10*t11;
	t12 = c1-t23;
	t13 = t3+t5+t7-1.0;
	t14 = d2*t9;
	t15 = cos(d4);
	t21 = t10*t15;
	t16 = c0-t21;
	t17 = sin(d3);
	t18 = c2-t17;
	t19 = d1*t9;
	t20 = d0*d2*t9*(1.0/2.0);
	t22 = d0*t9;
	A0(0,0) = -b0+t18*(t19+t20)-t12*(t14-d0*d1*t9*(1.0/2.0))+t16*(t2*t9*(1.0/2.0)-t9*t13);
	A0(0,1) = -b1+t16*(t14+d0*d1*t9*(1.0/2.0))-t18*(t22-d1*d2*t9*(1.0/2.0))+t12*(t4*t9*(1.0/2.0)-t9*t13);
	A0(0,2) = -b2+t12*(t22+d1*d2*t9*(1.0/2.0))-t16*(t19-t20)+t18*(t6*t9*(1.0/2.0)-t9*t13);
	return A0;
}


MatrixXd jacobianForRotationAndTransitionUnitLength(const MatrixXd& var0,const MatrixXd& var1,const MatrixXd& var2)
{
	double b0,b1,b2;
	b0=var0(0,0);
	b1=var0(0,1);
	b2=var0(0,2);
	double c0,c1,c2;
	c0=var1(0,0);
	c1=var1(0,1);
	c2=var1(0,2);
	double d0,d1,d2,d3,d4;
	d0=var2(0,0);
	d1=var2(0,1);
	d2=var2(0,2);
	d3=var2(0,3);
	d4=var2(0,4);
	MatrixXd A0(3,5);
	double t2 ,t3 ,t4 ,t5 ,t6 ,t7 ,t8 ,t9 ,t10 ,t11 ,t12 ,t13 ,t14 ,t22 ,t15 ,t16 ,t17 ,t24 ,t18 ,t19 ,t20 ,t21 ,t23 ,t25 ,t26 ,t37 ,t27 ,t28 ,t36 ,t29 ,t30 ,t31 ,t32 ,t33 ,t34 ,t35 ,t38 ,t39 ,t40 ,t41 ,t42 ,t43 ,t44 ,t45 ,t46 ,t47 ,t48 ,t49 ;
	t2 = d0*d0;
	t3 = t2*(1.0/4.0);
	t4 = d1*d1;
	t5 = t4*(1.0/4.0);
	t6 = d2*d2;
	t7 = t6*(1.0/4.0);
	t8 = t3+t5+t7+1.0;
	t9 = 1.0/(t8*t8);
	t10 = cos(d3);
	t11 = 1.0/t8;
	t12 = sin(d3);
	t13 = c2-t12;
	t14 = sin(d4);
	t22 = t10*t14;
	t15 = c1-t22;
	t16 = d0*t11*(1.0/2.0);
	t17 = cos(d4);
	t24 = t10*t17;
	t18 = c0-t24;
	t19 = d1*t11*(1.0/2.0);
	t20 = t3+t5+t7-1.0;
	t21 = d1*d2*t9*(1.0/2.0);
	t23 = d0*d1*d2*t9*(1.0/4.0);
	t25 = d2*t2*t9*(1.0/4.0);
	t26 = d2*t11;
	t37 = d0*d1*t11*(1.0/2.0);
	t27 = t26-t37;
	t28 = t2*t11*(1.0/2.0);
	t36 = t11*t20;
	t29 = t28-t36;
	t30 = d0*d2*t9*(1.0/2.0);
	t31 = d1*t2*t9*(1.0/4.0);
	t32 = d0*t9*t20*(1.0/2.0);
	t33 = d0*t4*t9*(1.0/4.0);
	t34 = d2*t11*(1.0/2.0);
	t35 = d0*d1*t9*(1.0/2.0);
	t38 = t26+t37;
	t39 = d0*t6*t9*(1.0/4.0);
	t40 = d1*t9*t20*(1.0/2.0);
	t41 = d2*t4*t9*(1.0/4.0);
	t42 = t4*t9*(1.0/2.0);
	t43 = d1*t6*t9*(1.0/4.0);
	t44 = d1*t11;
	t45 = d0*d2*t11*(1.0/2.0);
	t46 = d0*t11;
	t47 = d1*d2*t11*(1.0/2.0);
	t48 = t46+t47;
	t49 = t44-t45;
	A0(0,0) = -t13*(t25+t35-d2*t11*(1.0/2.0))+t15*(t19+t30-d1*t2*t9*(1.0/4.0))+t18*(t16+t32-d0*t2*t9*(1.0/4.0));
	A0(0,1) = t15*(t16+t21-d0*t4*t9*(1.0/4.0))-t18*(t19+t31-d1*t9*t20*(1.0/2.0))-t13*(-t11+t23+t42);
	A0(0,2) = -t15*(t11+t23-t6*t9*(1.0/2.0))-t18*(t25+t34-d2*t9*t20*(1.0/2.0))-t13*(-t16+t21+t39);
	A0(0,3) = -t10*(t44+t45)-t12*t14*t27+t12*t17*t29;
	A0(0,4) = t10*t14*t29+t10*t17*t27;
	A0(1,0) = -t13*(t11+t23-t2*t9*(1.0/2.0))-t15*(t16-t32+t33)-t18*(-t19+t30+t31);
	A0(1,1) = t15*(t19+t40-d1*t4*t9*(1.0/4.0))+t13*(t34+t35-d2*t4*t9*(1.0/4.0))-t18*(-t16+t21+t33);
	A0(1,2) = -t18*(-t11+t23+t6*t9*(1.0/2.0))+t13*(t19+t30-d1*t6*t9*(1.0/4.0))-t15*(t34+t41-d2*t9*t20*(1.0/2.0));
	A0(1,3) = t10*(t46-d1*d2*t11*(1.0/2.0))-t12*t14*(t36-t4*t11*(1.0/2.0))+t12*t17*t38;
	A0(1,4) = t10*t17*(t36-t4*t11*(1.0/2.0))+t10*t14*t38;
	A0(2,0) = -t15*(-t11+t23+t2*t9*(1.0/2.0))-t13*(t16-t32+t39)+t18*(-t25+t34+t35);
	A0(2,1) = -t18*(t11+t23-t42)-t13*(t19-t40+t43)-t15*(-t34+t35+t41);
	A0(2,2) = t18*(t16+t21-t39)-t15*(-t19+t30+t43)+t13*(t34-d2*t6*t9*(1.0/4.0)+d2*t9*t20*(1.0/2.0));
	A0(2,3) = t10*(t36-t6*t11*(1.0/2.0))+t12*t14*t48-t12*t17*t49;
	A0(2,4) = -t10*t14*t49-t10*t17*t48;
	return A0;
}


MatrixXd jacobianForPointUnitLength(const MatrixXd& var0,const MatrixXd& var1,const MatrixXd& var2)
{
	double b0,b1,b2;
	b0=var0(0,0);
	b1=var0(0,1);
	b2=var0(0,2);
	double c0,c1,c2;
	c0=var1(0,0);
	c1=var1(0,1);
	c2=var1(0,2);
	double d0,d1,d2,d3,d4;
	d0=var2(0,0);
	d1=var2(0,1);
	d2=var2(0,2);
	d3=var2(0,3);
	d4=var2(0,4);
	MatrixXd A0(3,3);
	double t2 ,t3 ,t4 ,t5 ,t6 ,t7 ,t8 ,t9 ,t10 ,t11 ,t12 ,t13 ,t14 ;
	t2 = d0*d0;
	t3 = t2*(1.0/4.0);
	t4 = d1*d1;
	t5 = t4*(1.0/4.0);
	t6 = d2*d2;
	t7 = t6*(1.0/4.0);
	t8 = t3+t5+t7+1.0;
	t9 = 1.0/t8;
	t10 = d0*d1*t9*(1.0/2.0);
	t11 = t3+t5+t7-1.0;
	t12 = d1*t9;
	t13 = d0*d2*t9*(1.0/2.0);
	t14 = d1*d2*t9*(1.0/2.0);
	A0(0,0) = t2*t9*(1.0/2.0)-t9*t11;
	A0(0,1) = t10-d2*t9;
	A0(0,2) = t12+t13;
	A0(1,0) = t10+d2*t9;
	A0(1,1) = t4*t9*(1.0/2.0)-t9*t11;
	A0(1,2) = t14-d0*t9;
	A0(2,0) = -t12+t13;
	A0(2,1) = t14+d0*t9;
	A0(2,2) = t6*t9*(1.0/2.0)-t9*t11;
	return A0;
}


